{"ast":null,"code":"var _jsxFileName = \"/app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport maplibregl from \"maplibre-gl\";\nimport \"maplibre-gl/dist/maplibre-gl.css\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPENFREEMAP_STYLE = \"https://tiles.openfreemap.org/styles/positron\";\nexport default function App() {\n  _s();\n  const mapContainerRef = useRef(null);\n  const mapRef = useRef(null);\n  const [lang, setLang] = useState(\"en\");\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const base = process.env.REACT_APP_API_BASE || \"http://localhost:4000\";\n\n  // ✅ Initialize MapLibre\n  useEffect(() => {\n    if (!mapContainerRef.current) return;\n    const map = new maplibregl.Map({\n      container: mapContainerRef.current,\n      style: OPENFREEMAP_STYLE,\n      center: [77.58, 12.94],\n      // South Bangalore\n      zoom: 12.5\n    });\n    map.addControl(new maplibregl.NavigationControl(), \"top-right\");\n    mapRef.current = map;\n    map.on(\"load\", () => {\n      console.log(\"✅ Map loaded successfully\");\n      setIsMapLoaded(true);\n    });\n    return () => map.remove();\n  }, []);\n\n  // ✅ Fetch + Render GeoJSON (with Kannada if selected)\n  const loadGeoJSON = async (language = \"en\") => {\n    try {\n      var _geojson$features;\n      console.log(`🌍 Fetching data for: ${language}`);\n      const response = await fetch(`${base}/api/places-postgis?lang=${language}`);\n      if (!response.ok) {\n        console.error(\"❌ Backend error:\", response.statusText);\n        return;\n      }\n      const geojson = await response.json();\n      console.log(\"✅ Received GeoJSON features:\", (_geojson$features = geojson.features) === null || _geojson$features === void 0 ? void 0 : _geojson$features.length);\n      const map = mapRef.current;\n      if (!map) return;\n\n      // ✅ Update if source already exists\n      if (map.getSource(\"places\")) {\n        map.getSource(\"places\").setData(geojson);\n        return;\n      }\n\n      // ✅ Add GeoJSON source\n      map.addSource(\"places\", {\n        type: \"geojson\",\n        data: geojson\n      });\n\n      // ✅ Add circle markers\n      map.addLayer({\n        id: \"places-circle\",\n        type: \"circle\",\n        source: \"places\",\n        paint: {\n          \"circle-radius\": 6,\n          \"circle-color\": \"#007AFF\",\n          \"circle-stroke-color\": \"#fff\",\n          \"circle-stroke-width\": 1.5\n        }\n      });\n\n      // ✅ Add text labels (Kannada or English)\n      map.addLayer({\n        id: \"places-labels\",\n        type: \"symbol\",\n        source: \"places\",\n        layout: {\n          \"text-field\": [\"coalesce\", [\"get\", \"name_kn\"], [\"get\", \"name\"]],\n          \"text-font\": [\"Noto Sans Kannada Regular\", \"Arial Unicode MS Regular\"],\n          \"text-size\": 13,\n          \"text-offset\": [0, 1.2],\n          \"text-anchor\": \"top\"\n        },\n        paint: {\n          \"text-color\": \"#222\",\n          \"text-halo-color\": \"#fff\",\n          \"text-halo-width\": 1.2\n        }\n      });\n\n      // ✅ Popup on click\n      map.on(\"click\", \"places-circle\", e => {\n        const props = e.features[0].properties;\n        const name = props.name_kn || props.name;\n        const category = props.category || \"Unknown\";\n        new maplibregl.Popup().setLngLat(e.lngLat).setHTML(`<b>${name}</b><br><small>${category}</small>`).addTo(map);\n      });\n\n      // ✅ Cursor hover style\n      map.on(\"mouseenter\", \"places-circle\", () => {\n        map.getCanvas().style.cursor = \"pointer\";\n      });\n      map.on(\"mouseleave\", \"places-circle\", () => {\n        map.getCanvas().style.cursor = \"\";\n      });\n    } catch (err) {\n      console.error(\"❌ Failed to fetch GeoJSON:\", err);\n    }\n  };\n\n  // ✅ Load data once map is ready or lang changes\n  useEffect(() => {\n    if (isMapLoaded) loadGeoJSON(lang);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isMapLoaded, lang]);\n\n  // ✅ Toggle language\n  const handleTranslate = () => {\n    const nextLang = lang === \"en\" ? \"kn\" : \"en\";\n    console.log(\"🔄 Switching language to:\", nextLang);\n    setLang(nextLang);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"topbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bhuvan Kannada Map (OpenFreeMap + MapLibre)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: handleTranslate,\n        children: lang === \"en\" ? \"Translate → Kannada\" : \"Show English\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: \"Base Map: OpenFreeMap (Positron) | Data: PostGIS | Translation: Lingvanex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OrB9vZKEmthSNwrmRnaKu64o0pw=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","maplibregl","jsxDEV","_jsxDEV","OPENFREEMAP_STYLE","App","_s","mapContainerRef","mapRef","lang","setLang","isMapLoaded","setIsMapLoaded","base","process","env","REACT_APP_API_BASE","current","map","Map","container","style","center","zoom","addControl","NavigationControl","on","console","log","remove","loadGeoJSON","language","_geojson$features","response","fetch","ok","error","statusText","geojson","json","features","length","getSource","setData","addSource","type","data","addLayer","id","source","paint","layout","e","props","properties","name","name_kn","category","Popup","setLngLat","lngLat","setHTML","addTo","getCanvas","cursor","err","handleTranslate","nextLang","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","_c","$RefreshReg$"],"sources":["/app/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport maplibregl from \"maplibre-gl\";\nimport \"maplibre-gl/dist/maplibre-gl.css\";\nimport \"./styles.css\";\n\nconst OPENFREEMAP_STYLE = \"https://tiles.openfreemap.org/styles/positron\";\n\nexport default function App() {\n  const mapContainerRef = useRef(null);\n  const mapRef = useRef(null);\n  const [lang, setLang] = useState(\"en\");\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const base = process.env.REACT_APP_API_BASE || \"http://localhost:4000\";\n\n  // ✅ Initialize MapLibre\n  useEffect(() => {\n    if (!mapContainerRef.current) return;\n\n    const map = new maplibregl.Map({\n      container: mapContainerRef.current,\n      style: OPENFREEMAP_STYLE,\n      center: [77.58, 12.94], // South Bangalore\n      zoom: 12.5,\n    });\n\n    map.addControl(new maplibregl.NavigationControl(), \"top-right\");\n    mapRef.current = map;\n\n    map.on(\"load\", () => {\n      console.log(\"✅ Map loaded successfully\");\n      setIsMapLoaded(true);\n    });\n\n    return () => map.remove();\n  }, []);\n\n  // ✅ Fetch + Render GeoJSON (with Kannada if selected)\n  const loadGeoJSON = async (language = \"en\") => {\n    try {\n      console.log(`🌍 Fetching data for: ${language}`);\n      const response = await fetch(`${base}/api/places-postgis?lang=${language}`);\n\n      if (!response.ok) {\n        console.error(\"❌ Backend error:\", response.statusText);\n        return;\n      }\n\n      const geojson = await response.json();\n      console.log(\"✅ Received GeoJSON features:\", geojson.features?.length);\n\n      const map = mapRef.current;\n      if (!map) return;\n\n      // ✅ Update if source already exists\n      if (map.getSource(\"places\")) {\n        map.getSource(\"places\").setData(geojson);\n        return;\n      }\n\n      // ✅ Add GeoJSON source\n      map.addSource(\"places\", { type: \"geojson\", data: geojson });\n\n      // ✅ Add circle markers\n      map.addLayer({\n        id: \"places-circle\",\n        type: \"circle\",\n        source: \"places\",\n        paint: {\n          \"circle-radius\": 6,\n          \"circle-color\": \"#007AFF\",\n          \"circle-stroke-color\": \"#fff\",\n          \"circle-stroke-width\": 1.5,\n        },\n      });\n\n      // ✅ Add text labels (Kannada or English)\n      map.addLayer({\n        id: \"places-labels\",\n        type: \"symbol\",\n        source: \"places\",\n        layout: {\n          \"text-field\": [\"coalesce\", [\"get\", \"name_kn\"], [\"get\", \"name\"]],\n          \"text-font\": [\"Noto Sans Kannada Regular\", \"Arial Unicode MS Regular\"],\n          \"text-size\": 13,\n          \"text-offset\": [0, 1.2],\n          \"text-anchor\": \"top\",\n        },\n        paint: {\n          \"text-color\": \"#222\",\n          \"text-halo-color\": \"#fff\",\n          \"text-halo-width\": 1.2,\n        },\n      });\n\n      // ✅ Popup on click\n      map.on(\"click\", \"places-circle\", (e) => {\n        const props = e.features[0].properties;\n        const name = props.name_kn || props.name;\n        const category = props.category || \"Unknown\";\n        new maplibregl.Popup()\n          .setLngLat(e.lngLat)\n          .setHTML(`<b>${name}</b><br><small>${category}</small>`)\n          .addTo(map);\n      });\n\n      // ✅ Cursor hover style\n      map.on(\"mouseenter\", \"places-circle\", () => {\n        map.getCanvas().style.cursor = \"pointer\";\n      });\n      map.on(\"mouseleave\", \"places-circle\", () => {\n        map.getCanvas().style.cursor = \"\";\n      });\n    } catch (err) {\n      console.error(\"❌ Failed to fetch GeoJSON:\", err);\n    }\n  };\n\n  // ✅ Load data once map is ready or lang changes\n  useEffect(() => {\n    if (isMapLoaded) loadGeoJSON(lang);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isMapLoaded, lang]);\n\n  // ✅ Toggle language\n  const handleTranslate = () => {\n    const nextLang = lang === \"en\" ? \"kn\" : \"en\";\n    console.log(\"🔄 Switching language to:\", nextLang);\n    setLang(nextLang);\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"topbar\">\n        <h1>Bhuvan Kannada Map (OpenFreeMap + MapLibre)</h1>\n        <button className=\"btn\" onClick={handleTranslate}>\n          {lang === \"en\" ? \"Translate → Kannada\" : \"Show English\"}\n        </button>\n      </header>\n\n      <div ref={mapContainerRef} className=\"map-container\" />\n\n      <footer className=\"footer\">\n        Base Map: OpenFreeMap (Positron) | Data: PostGIS | Translation: Lingvanex\n      </footer>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAO,kCAAkC;AACzC,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,iBAAiB,GAAG,+CAA+C;AAEzE,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAMC,eAAe,GAAGR,MAAM,CAAC,IAAI,CAAC;EACpC,MAAMS,MAAM,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMa,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,uBAAuB;;EAEtE;EACAlB,SAAS,CAAC,MAAM;IACd,IAAI,CAACS,eAAe,CAACU,OAAO,EAAE;IAE9B,MAAMC,GAAG,GAAG,IAAIjB,UAAU,CAACkB,GAAG,CAAC;MAC7BC,SAAS,EAAEb,eAAe,CAACU,OAAO;MAClCI,KAAK,EAAEjB,iBAAiB;MACxBkB,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;MAAE;MACxBC,IAAI,EAAE;IACR,CAAC,CAAC;IAEFL,GAAG,CAACM,UAAU,CAAC,IAAIvB,UAAU,CAACwB,iBAAiB,CAAC,CAAC,EAAE,WAAW,CAAC;IAC/DjB,MAAM,CAACS,OAAO,GAAGC,GAAG;IAEpBA,GAAG,CAACQ,EAAE,CAAC,MAAM,EAAE,MAAM;MACnBC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MACxChB,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC;IAEF,OAAO,MAAMM,GAAG,CAACW,MAAM,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,WAAW,GAAG,MAAAA,CAAOC,QAAQ,GAAG,IAAI,KAAK;IAC7C,IAAI;MAAA,IAAAC,iBAAA;MACFL,OAAO,CAACC,GAAG,CAAC,yBAAyBG,QAAQ,EAAE,CAAC;MAChD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGrB,IAAI,4BAA4BkB,QAAQ,EAAE,CAAC;MAE3E,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChBR,OAAO,CAACS,KAAK,CAAC,kBAAkB,EAAEH,QAAQ,CAACI,UAAU,CAAC;QACtD;MACF;MAEA,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACrCZ,OAAO,CAACC,GAAG,CAAC,8BAA8B,GAAAI,iBAAA,GAAEM,OAAO,CAACE,QAAQ,cAAAR,iBAAA,uBAAhBA,iBAAA,CAAkBS,MAAM,CAAC;MAErE,MAAMvB,GAAG,GAAGV,MAAM,CAACS,OAAO;MAC1B,IAAI,CAACC,GAAG,EAAE;;MAEV;MACA,IAAIA,GAAG,CAACwB,SAAS,CAAC,QAAQ,CAAC,EAAE;QAC3BxB,GAAG,CAACwB,SAAS,CAAC,QAAQ,CAAC,CAACC,OAAO,CAACL,OAAO,CAAC;QACxC;MACF;;MAEA;MACApB,GAAG,CAAC0B,SAAS,CAAC,QAAQ,EAAE;QAAEC,IAAI,EAAE,SAAS;QAAEC,IAAI,EAAER;MAAQ,CAAC,CAAC;;MAE3D;MACApB,GAAG,CAAC6B,QAAQ,CAAC;QACXC,EAAE,EAAE,eAAe;QACnBH,IAAI,EAAE,QAAQ;QACdI,MAAM,EAAE,QAAQ;QAChBC,KAAK,EAAE;UACL,eAAe,EAAE,CAAC;UAClB,cAAc,EAAE,SAAS;UACzB,qBAAqB,EAAE,MAAM;UAC7B,qBAAqB,EAAE;QACzB;MACF,CAAC,CAAC;;MAEF;MACAhC,GAAG,CAAC6B,QAAQ,CAAC;QACXC,EAAE,EAAE,eAAe;QACnBH,IAAI,EAAE,QAAQ;QACdI,MAAM,EAAE,QAAQ;QAChBE,MAAM,EAAE;UACN,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;UAC/D,WAAW,EAAE,CAAC,2BAA2B,EAAE,0BAA0B,CAAC;UACtE,WAAW,EAAE,EAAE;UACf,aAAa,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;UACvB,aAAa,EAAE;QACjB,CAAC;QACDD,KAAK,EAAE;UACL,YAAY,EAAE,MAAM;UACpB,iBAAiB,EAAE,MAAM;UACzB,iBAAiB,EAAE;QACrB;MACF,CAAC,CAAC;;MAEF;MACAhC,GAAG,CAACQ,EAAE,CAAC,OAAO,EAAE,eAAe,EAAG0B,CAAC,IAAK;QACtC,MAAMC,KAAK,GAAGD,CAAC,CAACZ,QAAQ,CAAC,CAAC,CAAC,CAACc,UAAU;QACtC,MAAMC,IAAI,GAAGF,KAAK,CAACG,OAAO,IAAIH,KAAK,CAACE,IAAI;QACxC,MAAME,QAAQ,GAAGJ,KAAK,CAACI,QAAQ,IAAI,SAAS;QAC5C,IAAIxD,UAAU,CAACyD,KAAK,CAAC,CAAC,CACnBC,SAAS,CAACP,CAAC,CAACQ,MAAM,CAAC,CACnBC,OAAO,CAAC,MAAMN,IAAI,kBAAkBE,QAAQ,UAAU,CAAC,CACvDK,KAAK,CAAC5C,GAAG,CAAC;MACf,CAAC,CAAC;;MAEF;MACAA,GAAG,CAACQ,EAAE,CAAC,YAAY,EAAE,eAAe,EAAE,MAAM;QAC1CR,GAAG,CAAC6C,SAAS,CAAC,CAAC,CAAC1C,KAAK,CAAC2C,MAAM,GAAG,SAAS;MAC1C,CAAC,CAAC;MACF9C,GAAG,CAACQ,EAAE,CAAC,YAAY,EAAE,eAAe,EAAE,MAAM;QAC1CR,GAAG,CAAC6C,SAAS,CAAC,CAAC,CAAC1C,KAAK,CAAC2C,MAAM,GAAG,EAAE;MACnC,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZtC,OAAO,CAACS,KAAK,CAAC,4BAA4B,EAAE6B,GAAG,CAAC;IAClD;EACF,CAAC;;EAED;EACAnE,SAAS,CAAC,MAAM;IACd,IAAIa,WAAW,EAAEmB,WAAW,CAACrB,IAAI,CAAC;IAClC;EACF,CAAC,EAAE,CAACE,WAAW,EAAEF,IAAI,CAAC,CAAC;;EAEvB;EACA,MAAMyD,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,QAAQ,GAAG1D,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI;IAC5CkB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEuC,QAAQ,CAAC;IAClDzD,OAAO,CAACyD,QAAQ,CAAC;EACnB,CAAC;EAED,oBACEhE,OAAA;IAAKiE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBlE,OAAA;MAAQiE,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBACxBlE,OAAA;QAAAkE,QAAA,EAAI;MAA2C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpDtE,OAAA;QAAQiE,SAAS,EAAC,KAAK;QAACM,OAAO,EAAER,eAAgB;QAAAG,QAAA,EAC9C5D,IAAI,KAAK,IAAI,GAAG,qBAAqB,GAAG;MAAc;QAAA6D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAETtE,OAAA;MAAKwE,GAAG,EAAEpE,eAAgB;MAAC6D,SAAS,EAAC;IAAe;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEvDtE,OAAA;MAAQiE,SAAS,EAAC,QAAQ;MAAAC,QAAA,EAAC;IAE3B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACnE,EAAA,CA3IuBD,GAAG;AAAAuE,EAAA,GAAHvE,GAAG;AAAA,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}