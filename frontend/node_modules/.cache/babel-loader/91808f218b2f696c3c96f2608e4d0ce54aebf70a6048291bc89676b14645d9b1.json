{"ast":null,"code":"var _jsxFileName = \"/app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport maplibregl from \"maplibre-gl\";\nimport \"maplibre-gl/dist/maplibre-gl.css\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPENFREEMAP_STYLE = \"https://tiles.openfreemap.org/styles/positron\";\nexport default function App() {\n  _s();\n  const mapContainerRef = useRef(null);\n  const mapRef = useRef(null);\n  const [lang, setLang] = useState(\"en\");\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const base = process.env.REACT_APP_API_BASE || \"http://localhost:4000\";\n\n  // Initialize Map\n  useEffect(() => {\n    if (!mapContainerRef.current) return;\n    const map = new maplibregl.Map({\n      container: mapContainerRef.current,\n      style: OPENFREEMAP_STYLE,\n      center: [77.58, 12.94],\n      zoom: 13\n    });\n    map.addControl(new maplibregl.NavigationControl(), \"top-right\");\n    mapRef.current = map;\n    map.on(\"load\", () => {\n      console.log(\"✅ Map loaded successfully\");\n      setIsMapLoaded(true);\n    });\n    return () => map.remove();\n  }, []);\n\n  // Load GeoJSON\n  const loadGeoJSON = async (language = \"en\") => {\n    try {\n      var _geojson$features;\n      const response = await fetch(`${base}/api/places-postgis?lang=${language}`);\n      if (!response.ok) return console.error(\"❌ Backend error:\", response.statusText);\n      const geojson = await response.json();\n      console.log(\"✅ Received GeoJSON features:\", (_geojson$features = geojson.features) === null || _geojson$features === void 0 ? void 0 : _geojson$features.length);\n      const map = mapRef.current;\n      if (!map) return;\n\n      // Clean up existing layers\n      if (map.getLayer(\"places\")) map.removeLayer(\"places\");\n      if (map.getSource(\"places\")) map.removeSource(\"places\");\n      map.addSource(\"places\", {\n        type: \"geojson\",\n        data: geojson\n      });\n\n      // Only English names use map text rendering\n      if (language === \"en\") {\n        map.addLayer({\n          id: \"places\",\n          type: \"symbol\",\n          source: \"places\",\n          layout: {\n            \"text-field\": [\"get\", \"name\"],\n            \"text-size\": 13,\n            \"text-anchor\": \"top\",\n            \"text-offset\": [0, 1.2]\n          },\n          paint: {\n            \"text-color\": \"#333\",\n            \"text-halo-color\": \"#fff\",\n            \"text-halo-width\": 1.2\n          }\n        });\n      } else {\n        // Kannada labels as HTML markers (works 100%)\n        geojson.features.forEach(f => {\n          const el = document.createElement(\"div\");\n          el.className = \"kn-label\";\n          el.innerText = f.properties.name_kn || f.properties.name;\n          new maplibregl.Marker(el).setLngLat(f.geometry.coordinates).addTo(map);\n        });\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to fetch GeoJSON:\", err);\n    }\n  };\n  useEffect(() => {\n    if (isMapLoaded) loadGeoJSON(lang);\n  }, [isMapLoaded, lang]);\n  const handleTranslate = () => {\n    const nextLang = lang === \"en\" ? \"kn\" : \"en\";\n    setLang(nextLang);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"topbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bhuvan Kannada Map (OpenFreeMap + MapLibre)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: handleTranslate,\n        children: lang === \"en\" ? \"Translate → Kannada\" : \"Show English\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: \"Base Map: OpenFreeMap | Data: PostGIS | Translation: Lingvanex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OrB9vZKEmthSNwrmRnaKu64o0pw=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","maplibregl","jsxDEV","_jsxDEV","OPENFREEMAP_STYLE","App","_s","mapContainerRef","mapRef","lang","setLang","isMapLoaded","setIsMapLoaded","base","process","env","REACT_APP_API_BASE","current","map","Map","container","style","center","zoom","addControl","NavigationControl","on","console","log","remove","loadGeoJSON","language","_geojson$features","response","fetch","ok","error","statusText","geojson","json","features","length","getLayer","removeLayer","getSource","removeSource","addSource","type","data","addLayer","id","source","layout","paint","forEach","f","el","document","createElement","className","innerText","properties","name_kn","name","Marker","setLngLat","geometry","coordinates","addTo","err","handleTranslate","nextLang","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","_c","$RefreshReg$"],"sources":["/app/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport maplibregl from \"maplibre-gl\";\nimport \"maplibre-gl/dist/maplibre-gl.css\";\nimport \"./styles.css\";\n\nconst OPENFREEMAP_STYLE = \"https://tiles.openfreemap.org/styles/positron\";\n\nexport default function App() {\n  const mapContainerRef = useRef(null);\n  const mapRef = useRef(null);\n  const [lang, setLang] = useState(\"en\");\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const base = process.env.REACT_APP_API_BASE || \"http://localhost:4000\";\n\n  // Initialize Map\n  useEffect(() => {\n    if (!mapContainerRef.current) return;\n\n    const map = new maplibregl.Map({\n      container: mapContainerRef.current,\n      style: OPENFREEMAP_STYLE,\n      center: [77.58, 12.94],\n      zoom: 13,\n    });\n\n    map.addControl(new maplibregl.NavigationControl(), \"top-right\");\n    mapRef.current = map;\n\n    map.on(\"load\", () => {\n      console.log(\"✅ Map loaded successfully\");\n      setIsMapLoaded(true);\n    });\n\n    return () => map.remove();\n  }, []);\n\n  // Load GeoJSON\n  const loadGeoJSON = async (language = \"en\") => {\n    try {\n      const response = await fetch(`${base}/api/places-postgis?lang=${language}`);\n      if (!response.ok) return console.error(\"❌ Backend error:\", response.statusText);\n\n      const geojson = await response.json();\n      console.log(\"✅ Received GeoJSON features:\", geojson.features?.length);\n\n      const map = mapRef.current;\n      if (!map) return;\n\n      // Clean up existing layers\n      if (map.getLayer(\"places\")) map.removeLayer(\"places\");\n      if (map.getSource(\"places\")) map.removeSource(\"places\");\n\n      map.addSource(\"places\", { type: \"geojson\", data: geojson });\n\n      // Only English names use map text rendering\n      if (language === \"en\") {\n        map.addLayer({\n          id: \"places\",\n          type: \"symbol\",\n          source: \"places\",\n          layout: {\n            \"text-field\": [\"get\", \"name\"],\n            \"text-size\": 13,\n            \"text-anchor\": \"top\",\n            \"text-offset\": [0, 1.2],\n          },\n          paint: {\n            \"text-color\": \"#333\",\n            \"text-halo-color\": \"#fff\",\n            \"text-halo-width\": 1.2,\n          },\n        });\n      } else {\n        // Kannada labels as HTML markers (works 100%)\n        geojson.features.forEach((f) => {\n          const el = document.createElement(\"div\");\n          el.className = \"kn-label\";\n          el.innerText = f.properties.name_kn || f.properties.name;\n          new maplibregl.Marker(el)\n            .setLngLat(f.geometry.coordinates)\n            .addTo(map);\n        });\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to fetch GeoJSON:\", err);\n    }\n  };\n\n  useEffect(() => {\n    if (isMapLoaded) loadGeoJSON(lang);\n  }, [isMapLoaded, lang]);\n\n  const handleTranslate = () => {\n    const nextLang = lang === \"en\" ? \"kn\" : \"en\";\n    setLang(nextLang);\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"topbar\">\n        <h1>Bhuvan Kannada Map (OpenFreeMap + MapLibre)</h1>\n        <button className=\"btn\" onClick={handleTranslate}>\n          {lang === \"en\" ? \"Translate → Kannada\" : \"Show English\"}\n        </button>\n      </header>\n\n      <div ref={mapContainerRef} className=\"map-container\" />\n\n      <footer className=\"footer\">\n        Base Map: OpenFreeMap | Data: PostGIS | Translation: Lingvanex\n      </footer>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}